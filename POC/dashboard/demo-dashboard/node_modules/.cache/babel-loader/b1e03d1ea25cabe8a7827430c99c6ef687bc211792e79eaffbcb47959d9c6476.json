{"ast":null,"code":"var _jsxFileName = \"/media/psf/Home/Desktop/MX/MX Project/MX Project/CITRA/POC/dashboard/demo-dashboard/src/component/CITRA_Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Paper, Typography } from '@mui/material';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst CITRADashboard = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Emotion Distribution',\n      data: [],\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'\n      // ... add more colors as needed\n      ],\n      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)'\n      // ... add more border colors as needed\n      ],\n      borderWidth: 1\n    }]\n  });\n  useEffect(() => {\n    fetch('https://citra-eva2ckcawq-uc.a.run.app/values') // Replace with your API endpoint\n    .then(response => response.json()).then(data => {\n      console.log(data);\n      const emotions = Object.keys(data);\n      const percentages = Object.values(data);\n      setChartData(prevData => ({\n        ...prevData,\n        labels: emotions,\n        datasets: [{\n          ...prevData.datasets[0],\n          data: percentages\n        }]\n      }));\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      // Handle error state as needed\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          padding: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          children: \"CITRA Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), chartData.labels.length > 0 ? /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(CITRADashboard, \"3CCYEIjTORnPQ1+isMJj/KCPzYo=\");\n_c = CITRADashboard;\nexport default CITRADashboard;\nvar _c;\n$RefreshReg$(_c, \"CITRADashboard\");","map":{"version":3,"names":["React","useEffect","useState","Grid","Paper","Typography","Pie","Chart","ChartJS","ArcElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","CITRADashboard","_s","chartData","setChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","fetch","then","response","json","console","log","emotions","Object","keys","percentages","values","prevData","catch","error","container","spacing","children","item","xs","elevation","style","padding","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/media/psf/Home/Desktop/MX/MX Project/MX Project/CITRA/POC/dashboard/demo-dashboard/src/component/CITRA_Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid, Paper, Typography } from '@mui/material';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst CITRADashboard = () => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Emotion Distribution',\n      data: [],\n      backgroundColor: [\n        'rgba(255, 99, 132, 0.2)',\n        'rgba(54, 162, 235, 0.2)',\n        // ... add more colors as needed\n      ],\n      borderColor: [\n        'rgba(255, 99, 132, 1)',\n        'rgba(54, 162, 235, 1)',\n        // ... add more border colors as needed\n      ],\n      borderWidth: 1\n    }]\n  });\n\n  useEffect(() => {\n    fetch('https://citra-eva2ckcawq-uc.a.run.app/values') // Replace with your API endpoint\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        const emotions = Object.keys(data);\n        const percentages = Object.values(data);\n\n        setChartData(prevData => ({\n          ...prevData,\n          labels: emotions,\n          datasets: [{\n            ...prevData.datasets[0],\n            data: percentages\n          }]\n        }));\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        // Handle error state as needed\n      });\n  }, []);\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Paper elevation={3} style={{ padding: '20px' }}>\n          <Typography variant=\"h4\" gutterBottom>\n            CITRA Dashboard\n          </Typography>\n          {chartData.labels.length > 0 ? (\n            <Pie data={chartData} />\n          ) : (\n            <Typography variant=\"subtitle1\">Loading data...</Typography>\n          )}\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default CITRADashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}